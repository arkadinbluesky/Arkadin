<?phpdefine('MAX_NUM', 50);include CONFIG . 'webex.config.php';(defined('WEBEX_ELEM_PER_PAGE')) ? "" : define("WEBEX_ELEM_PER_PAGE", 100);class microsite extends Controller {	public $module_group = "Arkadin";	public $xml_microsite_main = '<?xml version="1.0" encoding="UTF-8"?><serv:message xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:serv="http://www.webex.com/schemas/2002/06/service"><header><securityContext><siteName>[sitename]</siteName><webExID>[webexid]</webExID><password>[password]</password><partnerID></partnerID><email></email></securityContext></header><body><bodyContent xsi:type="java:com.webex.service.binding.user.LstsummaryUser"><listControl><serv:startFrom>[startfrom]</serv:startFrom><serv:maximumNum>[maxnum]</serv:maximumNum><serv:listMethod>AND</serv:listMethod></listControl><order><orderBy>UID</orderBy><orderAD>ASC</orderAD></order></bodyContent></body></serv:message>';	public $xml_microsite_main_field = array("[sitename]", "[webexid]", "[password]", "[startfrom]", "[maxnum]");	public $password = array('2Express321',		'Chouette@12',		'pass123',		'Arkadin2011',		'Chouette@1',		'Chouette@2011',		'Pass1234',		'Alten@2011',		'Welcome123',		'sc.france',		'Chouette@321',		'Cs.@2011',		'Chouette',		'2Express3210',		'Pass12345',		'Welcome456',		'Chouette@12009',		'P@ss123',		'arkadin',		'Ark@din2009',		'Ark@din2010',		'Ark@din2011',		'Chouette@11',		'Chouette@15',		'Paris@2011',		'Cs.@2012',		'Express123',		'Cs.@1234',		'Cs.@2013',		'Welcome1234');	public $_weblogin_exclude = array('userId', 'subscriberAccessCode', 'participantAccessCode');	function index() {		$this->layout_name = "admin";		$this->title = "Webex";		$this->ariane = "> " . $this->title;		$_SQL = Singleton::getInstance(SQL_DRIVER);		$data = array();		(empty($_GET['id_geolocalisation_country']) ? $data['id_geolocalisation_country'] = "" : $data['id_geolocalisation_country'] = $_GET['id_geolocalisation_country']);		(empty($_GET['id_answer']) ? $data['id_answer'] = "" : $data['id_answer'] = $_GET['id_answer']);		(empty($_GET['id_history_etat']) ? $data['id_history_etat'] = "" : $data['id_history_etat'] = $_GET['id_history_etat']);		(empty($_GET['page'])) ? $data['page'] = 1 : $data['page'] = $_GET['page'];		(empty($_GET['site_name-auto'])) ? $data['site_name-auto'] = "" : $data['site_name-auto'] = $_GET['site_name-auto'];		if ($_SERVER['REQUEST_METHOD'] == "POST")		{			if (!empty($_POST['microsite_main']['site_name-auto']))			{				(empty($_POST['microsite_main']['site_name-auto'])) ? $data['site_name'] = -1 : $data['site_name-auto'] = $_POST['microsite_main']['site_name-auto'];				header("location: " . LINK . __CLASS__ . "/" . __FUNCTION__ . "/site_name-auto:" . urlencode($data['site_name-auto']));				exit;			}			else			{				(empty($_POST['microsite_main']['id_geolocalisation_country'])) ? $data['id_geolocalisation_country'] = -1 : $data['id_geolocalisation_country'] = $_POST['microsite_main']['id_geolocalisation_country'];				(empty($_POST['microsite_main']['id_answer'])) ? $data['id_answer'] = -1 : $data['id_answer'] = $_POST['microsite_main']['id_answer'];				(empty($_POST['microsite_main']['id_history_etat'])) ? $data['id_history_etat'] = -1 : $data['id_history_etat'] = $_POST['microsite_main']['id_history_etat'];				header("location: " . LINK . __CLASS__ . "/" . __FUNCTION__ . "/id_geolocalisation_country:" . $data['id_geolocalisation_country'] . '/id_answer:' . urlencode($data['id_answer']) . '/id_history_etat:' . urlencode($data['id_history_etat']) . "/page:" . $data['page']);				exit;			}		}		$start = WEBEX_ELEM_PER_PAGE * ( $data['page'] - 1 );		$sql1 = "SELECT a.*, b.*,c.iso,a.id as id_site , z.iso as iso2  ";		$sql2 = "SELECT count(1) as cpt ";		$sql = " FROM microsite_main a            INNER JOIN geolocalisation_country z ON z.id = a.id_geolocalisation_country            LEFT JOIN ip c ON c.ip = a.ip            LEFT JOIN microsite_user b ON a.id = b.id_microsite_main AND a.login = b.webex_id            where 1 ";		if (!empty($data['site_name-auto']))		{			$sql .= " AND site_name like '" . $_SQL->sql_real_escape_string($data['site_name-auto']) . "%' ";		}		else		{			$query = " AND a.id_history_etat = 1 ";			if (!empty($data['id_history_etat']) && $data['id_history_etat'] != -1)			{				switch ($data['id_history_etat'])				{					case 2: $query = " AND id_history_etat=3 ";						break;					case -2: $query = "";						break;					case 4: $query = " AND total !=0 ";				}			}			$sql .= $query;		}		(empty($data['id_geolocalisation_country']) || $data['id_geolocalisation_country'] == -1) ? : $sql .=" AND a.id_geolocalisation_country = '" . $_SQL->sql_real_escape_string($data['id_geolocalisation_country']) . "' ";		if (!empty($data['id_answer']) && $data['id_answer'] != -1)		{			if ($data['id_answer'] == -2)			{				$sql .=" AND a.answer != 'SUCCESS' ";			}			else			{				$sql .=" AND a.answer = '" . $_SQL->sql_real_escape_string($data['id_answer']) . "' ";			}		}		$sql .= " order by site_name, answer, registration_date desc";		$res = $GLOBALS['_SQL']->sql_query($sql2 . $sql);		$data['count'] = $GLOBALS['_SQL']->sql_to_array($res);//*****************************pagination		$limit = "";		if (floor($data['count'][0]['cpt'] / WEBEX_ELEM_PER_PAGE) > 0)		{			include_once(LIB . "pagination.lib.php");			$pagination = new pagination(LINK . __CLASS__ . '/' . __FUNCTION__ . '/id_geolocalisation_country:' . $data['id_geolocalisation_country'] . '/id_answer:' . $data['id_answer'] . '/id_history_etat:' . $data['id_history_etat'], $data['page'], $data['count'][0]['cpt'], WEBEX_ELEM_PER_PAGE, WEBEX_NB_PAGE_TO_DISPLAY_MAX);			$tab = $pagination->get_sql_limit();			$pagination->set_alignment("left");			$pagination->set_invalid_page_number_text(__("Please input a valid page number!"));			$pagination->set_pages_number_text(__("pages of"));			$pagination->set_go_button_text(__("Go"));			$pagination->set_first_page_text("« " . __("First"));			$pagination->set_last_page_text(__("Last") . " »");			$pagination->set_next_page_text("»");			$pagination->set_prev_page_text("«");			$data['pagination'] = $pagination->print_pagination();			$limit = " LIMIT " . $tab[0] . "," . $tab[1] . " ";			$data['i'] = $tab[0] + 1;//*****************************pagination end		}		$res = $GLOBALS['_SQL']->sql_query($sql1 . $sql . $limit);		$data['mircosite'] = $_SQL->sql_to_array($res);		$sql = "SELECT distinct id_geolocalisation_country,iso,z.libelle FROM microsite_main a			INNER JOIN geolocalisation_country z ON z.id = a.id_geolocalisation_country			ORDER BY libelle ASC";		$res = $_SQL->sql_query($sql);		$i = 0;		while ($ob = $GLOBALS['_SQL']->sql_fetch_object($res)) {			$data['geolocalisation_country'][$i]['libelle'] = __($ob->libelle);			$data['geolocalisation_country'][$i]['id'] = $ob->id_geolocalisation_country;			$i++;		}		$sql = "SELECT distinct answer FROM microsite_main where answer != ''			ORDER BY answer ASC";		$res = $_SQL->sql_query($sql);		$i = 0;		$data['answer'][$i]['libelle'] = __("All errors");		$data['answer'][$i]['id'] = -2;		$i++;		while ($ob = $GLOBALS['_SQL']->sql_fetch_object($res)) {			$data['answer'][$i]['id'] = $ob->answer;			$data['answer'][$i]['libelle'] = $ob->answer;			$i++;		}		$i = 0;		$data['history_etat'][$i]['libelle'] = __("Select all");		$data['history_etat'][$i]['id'] = -2;		$i++;		$data['history_etat'][$i]['libelle'] = __("Active");		$data['history_etat'][$i]['id'] = 1;		$i++;		$data['history_etat'][$i]['libelle'] = __("Deleted");		$data['history_etat'][$i]['id'] = 2;		$i++;		$data['history_etat'][$i]['libelle'] = __("With users");		$data['history_etat'][$i]['id'] = 4;		$i++;		$sql = "SELECT count(1) as cpt, sum(total) as total FROM microsite_main where id_history_etat=1";		$res = $_SQL->sql_query($sql);		$data['stats'] = $GLOBALS['_SQL']->sql_to_array($res);		$this->set('data', $data);		$this->javascript = array("jquery-1.4.4.min.js", "jquery.autocomplete.min.js");		$this->code_javascript[] = '$("#microsite_main-site_name-auto").autocomplete("' . LINK . 'microsite/get_site_name/", {										mustMatch: false,					autoFill: true,					max: 100,					scrollHeight: 302,					delay:1					});					$("#microsite_main-site_name-auto").result(function(event, data, formatted) {						if (data)							$("#microsite_main-site_name").val(data[1]);					});';	}	function get_site_name() {		/*		  [path] => en/user/city/		  [q] => paris		  [limit] => 10		  [timestamp] => 1297207840432		  [lg] => en		  [url] => user/city/		 */		$this->layout_name = false;		$_SQL = Singleton::getInstance(SQL_DRIVER);		$sql = "SELECT site_name, id 			FROM microsite_main 		WHERE site_name LIKE '" . $_SQL->sql_real_escape_string($_GET['q']) . "%' 		ORDER BY site_name LIMIT 0,100";		$res = $_SQL->sql_query($sql);		$data = $_SQL->sql_to_array($res);		$this->set("data", $data);	}	function test_connexion() {		$this->layout_name = false;		$_SQL = Singleton::getInstance(SQL_DRIVER);		include(LIBRARY . "Glial/service/webex/webex.php");		$sql = "SELECT * FROM microsite_main 		where answer = 'SUCCESS' order by site_name";		$res = $_SQL->sql_query($sql);		$cpt = $_SQL->sql_num_rows($res);		$i = 0;		while ($ob = $_SQL->sql_fetch_object($res)) {			$i++;			$ob->url = webex::generate_url($ob->site_name);			echo "[" . $i . "/" . $cpt . "] [" . date("Y-m-d H:i:s") . "] URL : " . mb_strtolower($ob->site_name, 'utf-8') . " ...";			$replace_with = array(mb_strtolower($ob->site_name, 'utf-8'), $ob->login, $ob->password, 1, 50);			$xml = str_replace($this->xml_microsite_main_field, $replace_with, $this->xml_microsite_main);			//echo $xml . "\n";			$ob->password = trim($ob->password);			$ob->login = trim($ob->login);			$data['xml'] = webex::xml_post($xml, $ob->url, 443);			if ($data['xml'])			{				$answer = webex::clean_xml($data['xml']);				$data['tree'] = simplexml_load_string($answer);				$rep = trim($data['tree']->header->response->result);				if ($rep === "SUCCESS")				{					/*					  $micro = array();					  $micro['microsite_main']['xml'] = base64_encode(gzcompress($data['xml'], 9));					  $micro['microsite_main']['valid'] = 1;					  $micro['microsite_main']['total'] = intval(trim($data['tree']->body->bodyContent->matchingRecords->total));					  $micro['microsite_main']['id'] = $ob->id;					  $micro['microsite_main']['url'] = $ob->url;					  $micro['microsite_main']['ip'] = gethostbyname($ob->site_name . ".webex.com");					  $micro['microsite_main']['answer'] = $rep;					  $GLOBALS['_SQL']->set_history_user(42);					  $GLOBALS['_SQL']->set_history_type(13);					  if (!$_SQL->sql_save($micro))					  {					  debug($micro);					  debug($_SQL->sql_error());					  die("problem insertion xml");					  }					  else					  {					  echo "ANSWER : " . $rep . "\n";					  } */					echo $rep . "\n";				}				else				{					$rep = $rep . " (" . trim($data['tree']->header->response->reason) . ")";					echo $rep . "\n";					$micro = array();					$micro['microsite_main']['id'] = $ob->id;					//$micro['microsite_main']['url'] = $ob->url;					$micro['microsite_main']['xml'] = base64_encode(gzcompress($data['xml'], 9));					$micro['microsite_main']['valid'] = 2;					$micro['microsite_main']['answer'] = $rep;					//$micro['microsite_main']['ip'] = gethostbyname($ob->site_name . ".webex.com");					$GLOBALS['_SQL']->set_history_user(42);					$GLOBALS['_SQL']->set_history_type(13);					if (!$_SQL->sql_save($micro))					{						debug($micro);						debug($_SQL->sql_error());						die("problem insertion xml valid=2 ");					}					/*					  echo "answer : " . $data['xml'] . "\n";					  echo "xml clean : " . $answer . "\n";					  echo "xml obj : \n";					 */					//debug($data['tree']);				}			}			else			{				$rep = "IMPOSSIBLE TO REACH THIS URL";				$micro = array();				$micro['microsite_main']['id'] = $ob->id;				//$micro['microsite_main']['url'] = $ob->url;				$micro['microsite_main']['valid'] = 2;				$micro['microsite_main']['answer'] = $rep;				//$micro['microsite_main']['ip'] = @gethostbyname($ob->site_name . ".webex.com");				$GLOBALS['_SQL']->set_history_user(42);				$GLOBALS['_SQL']->set_history_type(13);				if (!$_SQL->sql_save($micro))				{					debug($micro);					debug($_SQL->sql_error());					die("problem insertion xml valid=2 ");				}				echo "IMPOSSIBLE TO REACH THIS URL\n";			}			//sleep(1);		}		$sql = "insert ignore into ip (ip) SELECT distinct ip FROM microsite_main where ip != ''";		$_SQL->sql_query($sql);	}	function get_microsite_by_id($id = 0) {		//$id = 394;		$this->layout_name = false;		$_SQL = Singleton::getInstance(SQL_DRIVER);		include_once(LIBRARY . "Glial/service/webex/webex.php");		$sql = "SELECT * FROM microsite_main where id ='" . $id . "' AND valid = 1";		$res = $_SQL->sql_query($sql);		$tmp = $_SQL->sql_to_array($res);		$data['microsite'] = $tmp[0];		for ($i = 0; $i < ceil($data['microsite']['total'] / MAX_NUM); $i++)		{			$replace_with = array(mb_strtolower($data['microsite']['site_name'], 'utf-8'), $data['microsite']['login'], $data['microsite']['password'], $i * MAX_NUM + 1, MAX_NUM);			$xml = str_replace($this->xml_microsite_main_field, $replace_with, $this->xml_microsite_main);			$startmtime = microtime(true);			$data['xml'] = webex::xml_post($xml, webex::generate_url($data['microsite']['site_name']), 443);			$totaltime = round(microtime(true) - $startmtime, 5);			echo "[" . date("Y-m-d H:i:s") . "] " . $data['microsite']['site_name'] . " - " . ($i * MAX_NUM + 1) . " to " . ($i * MAX_NUM + MAX_NUM) . " on " . $data['microsite']['total'] . " (" . $totaltime . ")\n";			if ($data['xml'])			{				$answer = webex::clean_xml($data['xml']);				$data['tree'] = simplexml_load_string($answer);				if (trim($data['tree']->header->response->result) === "SUCCESS")				{					$micro = array();					$micro['microsite_xml']['xml'] = base64_encode(gzcompress($data['xml']));					$micro['microsite_xml']['id_microsite_main'] = $data['microsite']['id'];					$micro['microsite_xml']['execution_time'] = $totaltime;					if (!$_SQL->sql_save($micro))					{						debug($micro);						debug($_SQL->sql_error());						die("problem insertion xml");					}				}				else				{					$xml_error = array();					$xml_error['microsite_xml_error']['id_microsite_main'] = $id;					$xml_error['microsite_xml_error']['id_history_etat'] = 1;					$xml_error['microsite_xml_error']['start_from'] = $i * MAX_NUM + 1;					$xml_error['microsite_xml_error']['maximum_num'] = MAX_NUM;					$xml_error['microsite_xml_error']['date'] = date("c");					if (!$_SQL->sql_save($xml_error))					{						debug($xml_error);						debug($_SQL->sql_error());						die("problem insertion microsite_xml_error");					}					continue;				}			}			else			{				echo "IMPOSSIBLE TO GET XML !!!\n";				debug($data['microsite']);				debug($data['xml']);				debug($replace_with);				break;				// die("ERROR CHECK CODE");			}			//sleep(1);		}	}	function get_all_user() {		$this->layout_name = false;		$_SQL = Singleton::getInstance(SQL_DRIVER);		include_once(LIBRARY . "Glial/service/webex/webex.php");		$sql = "SELECT id FROM microsite_main where valid = 1";		$res = $_SQL->sql_query($sql);		while ($ob = $_SQL->sql_fetch_object($res)) {			$this->get_microsite_by_id($ob->id);			//sleep(2);		}		exit;	}	function get_all_xml() {		echo "[" . date("Y-m-d H:i:s") . "] Part 1 : Text connexion\n";		//$this->test_connexion(true);		echo "[" . date("Y-m-d H:i:s") . "] Part 2 : Generate the query for Webex\n";		$this->layout_name = false;		$_SQL = Singleton::getInstance(SQL_DRIVER);		include_once(LIBRARY . "Glial/service/webex/webex.php");		$sql = "DELETE FROM microsite_xml";		$_SQL->sql_query($sql);		$sql = "SELECT id,ip, total FROM microsite_main where answer = 'SUCCESS' AND id_history_etat =1";		$res = $_SQL->sql_query($sql);		while ($ob = $_SQL->sql_fetch_object($res)) {			$max_query = ceil($ob->total / MAX_NUM);			for ($i = 0; $i < $max_query; $i++)			{				$microsite_xml = array();				$microsite_xml['microsite_xml']['id_microsite_main'] = $ob->id;				$microsite_xml['microsite_xml']['start_from'] = $i * MAX_NUM + 1;				$microsite_xml['microsite_xml']['maximum_num'] = MAX_NUM;				$microsite_xml['microsite_xml']['ip'] = $ob->ip;				if (!$_SQL->sql_save($microsite_xml))				{					print_r($microsite_xml);					print_r($_SQL->sql_error());					die();				}			}		}		echo "[" . date("Y-m-d H:i:s") . "] Part 3 : Get users summary\n";		$nb_tread = 10;		$this->multi_treads();		sleep(5);		$this->get_avancement_xml();		$sql = "SELECT * FROM  `microsite_xml` WHERE  `tried` =5";		$res = $_SQL->sql_query($sql);		while ($ob = $_SQL->sql_fetch_object($res)) {			for ($i = $ob->start_form; $i < $ob->start_form + $ob->maximum_num; $i++)			{				$data = array();				$data['microsite_xml']['id_microsite_main'] = $ob->id_microsite_main;				$data['microsite_xml']['ip'] = $ob->ip;				$data['microsite_xml']['start_from'] = $i;				$data['microsite_xml']['maximum_num'] = 1;				if (!$_SQL->sql_save($data))				{					print_r($data);					print_r($_SQL->sql_error());					die();				}			}		}		$sql = "DELETE FROM  `microsite_xml` WHERE  `tried` =5";		$_SQL->sql_query($sql);		$this->multi_treads();		sleep(5);		$this->get_avancement_xml();		exit;	}	function get_avancement_xml() {		$_SQL = Singleton::getInstance(SQL_DRIVER);		$sql = "SELECT count(1) as cpt FROM microsite_xml";		$res = $_SQL->sql_query($sql);		$ob = $_SQL->sql_fetch_object($res);		$total_query = $ob->cpt;		while (1) {			$return = intval(exec("ps -eaf | grep php | grep thread_xml | wc -l"));			if ($return <= 1)			{				break;			}			$sql = "SELECT count(1) as cpt from microsite_xml where xml != ''";			$res = $_SQL->sql_query($sql);			$ob = $_SQL->sql_fetch_object($res);			echo "[" . date("Y-m-d H:i:s") . "] [Nb threads active : " . $return . "] Avancement du traitement : " . round($ob->cpt / $total_query * 100, 2) . "%\n";			sleep(5);		}		echo "[" . date("Y-m-d H:i:s") . "] [Nb threads active : 0] Avancement du traitement : 100%\n";		echo "[" . date("Y-m-d H:i:s") . "] Part 4 : Get users summary (failed decrypted password with AES)\n";	}	function thread_xml() {		$this->layout_name = false;		$this->layout = false;		include_once(LIBRARY . "Glial/service/webex/webex.php");		$_SQL = Singleton::getInstance(SQL_DRIVER);		$sql = "SELECT count(1) as cpt FROM microsite_xml WHERE xml = '' and tried < 5 and is_focused = 0";		$res = $_SQL->sql_query($sql);		$ob = $_SQL->sql_fetch_object($res);		for ($i = 0; $i < $ob->cpt; $i++)		{			$sql = "SELECT count(1) as cpt FROM microsite_xml WHERE xml = '' and tried < 5 and is_focused = 0";			$res = $_SQL->sql_query($sql);			$ob2 = $_SQL->sql_fetch_object($res);			if ($ob2->cpt == 0)			{				break;			}			$sql = "SELECT *, b.id as id_xml                 FROM microsite_xml b                INNER JOIN microsite_main a ON b.id_microsite_main = a.id                WHERE b.xml = '' and b.tried < 5 and b.is_focused = 0 ORDER by rand() LIMIT 1";			$res2 = $_SQL->sql_query($sql);			$ob3 = $_SQL->sql_fetch_object($res2);			$sql = "UPDATE microsite_xml SET is_focused = 1 WHERE id = '" . $ob3->id_xml . "'";			$_SQL->sql_query($sql);			$this->get_xml_by_id($ob3->id_xml);			$sql = "UPDATE microsite_xml SET is_focused = 0 WHERE id = '" . $ob3->id_xml . "'";			$_SQL->sql_query($sql);		}	}	function thread_user($param) {		$this->layout_name = false;		$this->layout = false;		include_once(LIBRARY . "Glial/service/webex/webex.php");		$_SQL = Singleton::getInstance(SQL_DRIVER);		$sql = "SELECT count(1) as cpt FROM microsite_user_in_wait WHERE id_history_etat = 1 and tried < 5 and is_focused = 0";		$res = $_SQL->sql_query($sql);		$ob = $_SQL->sql_fetch_object($res);		for ($i = 0; $i < $ob->cpt; $i++)		{			$sql = "SELECT count(1) as cpt FROM microsite_user_in_wait WHERE id_history_etat = 1 and tried < 5 and is_focused = 0";			$res = $_SQL->sql_query($sql);			$ob2 = $_SQL->sql_fetch_object($res);			if ($ob2->cpt == 0)			{				break;			}			$var = microtime(true);			$end = substr($var, -1);			switch ($param)			{				case 0:				case 4:				case 9:					$orderby = " ORDER by id_microsite_user";					break;				case 1:				case 5:				case 8:					$orderby = " ORDER by id DESC";					break;				case 2:				case 6:				case 4:					$orderby = " ORDER by id";					break;				case 3:				case 7:					$orderby = " ORDER by id_microsite_user DESC";					break;			}			$sql = "SELECT *				FROM microsite_user_in_wait  a                WHERE a.id_history_etat = 1 and a.tried < 5 and a.is_focused = 0                 ";			$res2 = $_SQL->sql_query($sql);			$ob3 = $_SQL->sql_fetch_object($res2);			$sql = "UPDATE microsite_user_in_wait SET is_focused = 1 WHERE id = '" . $ob3->id . "'";			$_SQL->sql_query($sql);			$this->get_user_by_id($ob3->id);			$sql = "UPDATE microsite_user_in_wait SET id_history_etat = 3 WHERE id = '" . $ob3->id . "'";			$_SQL->sql_query($sql);		}	}	function get_user_by_id($id) {		$this->layout_name = false;		$this->layout = false;		include_once(LIBRARY . "Glial/service/webex/webex.php");		$_SQL = Singleton::getInstance(SQL_DRIVER);		$sql = "SELECT *, a.id as id_user           FROM microsite_user a          INNER JOIN microsite_main b ON a.id_microsite_main = b.id          WHERE a.id='" . $id . "'";//and a.webex_id='daniela.axinte@alstom.com		$res = $_SQL->sql_query($sql);		//$tab_final = array();		$i = 0;		while ($ob = $_SQL->sql_fetch_object($res)) {			$i++;			$startmtime = microtime(true);			$xml = webex::get_user_detail($ob->site_name, $ob->login, $ob->password, $ob->webex_id);			$totaltime = round(microtime(true) - $startmtime, 3);			$user_detail = webex::convert_xml_to_array($xml);			if ($user_detail)			{				if ($user_detail['header']['response']['result'] === "SUCCESS")				{					$array = array();					// récupération du weblogin					$out = array();					preg_match_all('/<[^>]+>([0-9]{9})<[^>]+>/', $xml, $matches);					foreach ($matches[0] as $value)					{						$tab_tag = explode(">", $value);						$tag = substr($tab_tag[0], 1);						$value = explode("</", $tab_tag[1]);						$out[] = $tag . '-' . $value[0];					}					if (count($out) != 0)					{						$user = array();						$weblogin = implode('|', $out);						$array['microsite_user']['weblogin'] = $weblogin;					}					$array['microsite_user']['id'] = $ob->id_user;					$array['microsite_user']['xml'] = base64_encode(gzcompress($xml));					$array['microsite_user']['execution_time'] = $totaltime;					if (!empty($user_detail['body']['bodyContent']['personalUrl']))					{						$array['microsite_user']['personal_url'] = $user_detail['body']['bodyContent']['personalUrl'];					}					$array['microsite_user']['expiration_date'] = $user_detail['body']['bodyContent']['expirationDate'];					$array['microsite_user']['time_zone_id'] = $user_detail['body']['bodyContent']['timeZoneID'];					if (!empty($user_detail['body']['bodyContent']['timeZone']))					{						$array['microsite_user']['time_zone'] = $user_detail['body']['bodyContent']['timeZone'];					}					$array['microsite_user']['time_zone_with_dst'] = $user_detail['body']['bodyContent']['timeZoneWithDST'];					$array['microsite_user']['language'] = $user_detail['body']['bodyContent']['language'];					if (!empty($user_detail['body']['bodyContent']['locale']))					{						$array['microsite_user']['locale'] = $user_detail['body']['bodyContent']['locale'];					}					$suscriber = array();					$participant = array();					$toll_free_call_in_number = array();					$toll_call_in_number = array();					if (!empty($user_detail['body']['bodyContent']['tspAccount']['tspAccount']))					{						if (!empty($user_detail['body']['bodyContent']['tspAccount']['tspAccount'][0]))						{							foreach ($user_detail['body']['bodyContent']['tspAccount']['tspAccount'] as $key => $tspAccount)							{								if (!empty($tspAccount['subscriberAccessCode']))								{									$suscriber[] = $tspAccount['subscriberAccessCode'];								}								if (!empty($tspAccount['participantAccessCode']))								{									$participant[] = $tspAccount['participantAccessCode'];								}								if (!empty($tspAccount['tollFreeCallInNumber']))								{									$toll_free_call_in_number[] = $tspAccount['tollFreeCallInNumber'];								}								if (!empty($tspAccount['tollCallInNumber']))								{									$toll_call_in_number[] = $tspAccount['tollCallInNumber'];								}							}							$array['microsite_user']['subscriber_access_code'] = implode(":", $suscriber);							$array['microsite_user']['participant_access_code'] = implode(":", $participant);							$array['microsite_user']['toll_free_call_in_number'] = implode(":", $toll_free_call_in_number);							$array['microsite_user']['toll_call_in_number'] = implode(":", $toll_call_in_number);							unset($suscriber);							unset($participant);							unset($toll_free_call_in_number);							unset($toll_call_in_number);						}						else						{							$array['microsite_user']['subscriber_access_code'] = $user_detail['body']['bodyContent']['tspAccount']['tspAccount']['subscriberAccessCode'];							$array['microsite_user']['participant_access_code'] = $user_detail['body']['bodyContent']['tspAccount']['tspAccount']['participantAccessCode'];							$array['microsite_user']['toll_free_call_in_number'] = $user_detail['body']['bodyContent']['tspAccount']['tspAccount']['tollFreeCallInNumber'];							$array['microsite_user']['toll_call_in_number'] = $user_detail['body']['bodyContent']['tspAccount']['tspAccount']['tollCallInNumber'];						}					}					$array['microsite_user']['language_id'] = $user_detail['body']['bodyContent']['languageID'];					$array['microsite_user']['user_id'] = $user_detail['body']['bodyContent']['userId'];					$startmtime2 = microtime(true);					$_SQL->sql_save($array);					$totaltime22 = round(microtime(true) - $startmtime2, 3);					unset($array);				}				else				{					echo "ERROR : " . $user_detail['header']['response']['result'] . "\n";					debug($user_detail['header']);				}			}			else			{				echo "ERROR answer XML !!!!!!!!!!!!!!!\n";			}			unset($xml);			unset($user_detail);			if ($i % 100 == 0)			{				echo "MEMORY PEAK    : " . number_format(memory_get_peak_usage(), 0, '.', ',') . "\n";				echo "MEMORY         : " . number_format(memory_get_usage(), 0, '.', ',') . "\n";				echo "Collect cycles : " . gc_collect_cycles() . "\n";			}			$totaltime2 = round(microtime(true) - $startmtime, 3);			$totaltime2 = $totaltime2 - $totaltime - $totaltime22;			echo "$i [" . date("Y-m-d H:i:s") . "] " . $ob->site_name . "/" . $ob->webex_id . " (" . $totaltime . " / " . $totaltime2 . " / " . $totaltime22 . ")\n";		}	}	function get_xml_by_id($id) {		$_SQL = Singleton::getInstance(SQL_DRIVER);		$sql = "SELECT *,a.id as id_site FROM microsite_main a             INNER JOIN microsite_xml b ON a.id = b.id_microsite_main             where b.id ='" . $id . "'";		$res = $_SQL->sql_query($sql);		$tmp = $_SQL->sql_to_array($res);		$data['microsite'] = $tmp[0];		$replace_with = array(mb_strtolower($data['microsite']['site_name'], 'utf-8'), $data['microsite']['login'], $data['microsite']['password'], $data['microsite']['start_from'], $data['microsite']['maximum_num']);		$xml = str_replace($this->xml_microsite_main_field, $replace_with, $this->xml_microsite_main);		$startmtime = microtime(true);		$data['xml'] = webex::xml_post($xml, webex::generate_url($data['microsite']['site_name']), 443);		$totaltime = round(microtime(true) - $startmtime, 5);		echo "[" . date("Y-m-d H:i:s") . "] " . $data['microsite']['site_name'] . " - " . $data['microsite']['start_from'] . " to " . ($data['microsite']['start_from'] + $data['microsite']['maximum_num']) . " on " . $data['microsite']['total'] . " (" . $totaltime . ")\n";		if ($data['xml'])		{			$answer = webex::clean_xml($data['xml']);			$data['tree'] = simplexml_load_string($answer);			if (trim($data['tree']->header->response->result) === "SUCCESS")			{				$micro = array();				$micro['microsite_xml']['id'] = $id;				$micro['microsite_xml']['id_microsite_main'] = $data['microsite']['id_site'];				$micro['microsite_xml']['xml'] = base64_encode(gzcompress($data['xml']));				$micro['microsite_xml']['date_inserted'] = date("c");				$micro['microsite_xml']['execution_time'] = $totaltime;				$micro['microsite_xml']['is_focused'] = 0;				//$_SQL->sql_save($micro);				if ($_SQL->sql_save($micro))				{					debug($micro);					debug($_SQL->sql_error());					debug($_SESSION);					die("problem insertion xml\n");				}			}			else			{				debug($data['tree']);				$sql = "UPDATE microsite_xml SET tried=tried+1 WHERE id =" . $id;				$_SQL->sql_query($sql);			}		}		else		{			debug($data['tree']);			$sql = "UPDATE microsite_xml SET tried=tried+1, execution_time=-1 WHERE id =" . $id;			$_SQL->sql_query($sql);			// die("ERROR CHECK CODE");		}	}	function parse_all_xml() {		ini_set("memory_limit", "512M");		$this->layout_name = false;		$_SQL = Singleton::getInstance(SQL_DRIVER);		include_once(LIBRARY . "Glial/service/webex/webex.php");		$sql = "SELECT *             FROM microsite_xml             where xml != '' and is_parsed =0        order by id asc";		$res = $_SQL->sql_query($sql);		$i = 0;		while ($ob = $_SQL->sql_fetch_object($res)) {			$xml = gzuncompress(base64_decode($ob->xml));			$file = $ob->id_microsite_main . '-' . $ob->start_from . ".xml";			//file_put_contents(TMP . "xml/microsite_xml/" . $file, $xml);			$array = webex::convert_xml_to_array($xml);			unset($xml);			foreach ($array['body']['bodyContent']['user'] as $user_tree)			{				$user = array();				$user['microsite_user']['id_microsite_main'] = $ob->id_microsite_main;				$user['microsite_user']['webex_id'] = $user_tree['webExId'];				$user['microsite_user']['firstname'] = $user_tree['firstName'];				$user['microsite_user']['lastname'] = $user_tree['lastName'];				$user['microsite_user']['date_inserted'] = date("c");				if (!empty($user_tree['email']))				{					$user['microsite_user']['email'] = $user_tree['email'];				}				$date = $user_tree['registrationDate'];				$date = substr($date, 6, 4) . "-" . substr($date, 0, 2) . "-" .					substr($date, 3, 2) . " " . substr($date, 11, 8);				$user['microsite_user']['registration_date'] = $date;				$user['microsite_user']['activate'] = $user_tree['active'];				$user['microsite_user']['timezone_id'] = (int) $user_tree['timeZoneID'];				$sql = "SELECT id,ip FROM microsite_user a				INNER JOIN microsite_main b ON b.id = a.id_microsite_main				where a.id_microsite_main =" . $user['microsite_user']['id_microsite_main'] . "                         					AND a.webex_id = '" . $_SQL->sql_real_escape_string($user['microsite_user']['webex_id']) . "'";				$res2 = $_SQL->sql_query($sql);				//echo "user count : ".$ob2->cpt."\n";				if ($_SQL->sql_num_rows($res2) == 0)				{					//$_SQL->set_history_type(12);					//$_SQL->set_history_user(42);					//echo "user\n";					$id_user = $_SQL->sql_save($user);					if (!$id_user)					{						echo "ERROR file : " . $file . " (already integrate ?)\n";						debug($user);						debug($_SQL->sql_error());						die('FATAL ERROR : Problem insert user');					}				}				else				{					$ob2 = $_SQL->sql_fetch_object($res2);					$id_user = $ob2->id;				}				$microsite_user_in_wait = array();				$microsite_user_in_wait['microsite_user_in_wait']['id_history_etat'] = 1;				$microsite_user_in_wait['microsite_user_in_wait']['id_microsite_user'] = $id_user;				$microsite_user_in_wait['microsite_user_in_wait']['ip'] = $ob2->ip;				$id_user_in_wait = $_SQL->sql_save($microsite_user_in_wait);				if (!$id_user_in_wait)				{					debug($microsite_user_in_wait);					debug($_SQL->sql_error());					die('FATAL ERROR : Problem insert microsite_user_in_wait');				}			}			unset($array);			$sql = "UPDATE microsite_xml SET is_parsed=1 where id = " . $ob->id;			$_SQL->sql_query($sql);			$i++;			echo $i . " file : " . $file . "=> OK !\n";			unset($ob);		}		exit;	}	/*	  private function one_shoot_update_site_name() {	  $this->layout_name = false;	  $_SQL = Singleton::getInstance(SQL_DRIVER);	  $sql = "SELECT * FROM microsite_main where site_name =''";	  $res = $_SQL->sql_query($sql);	  while ($ob = $_SQL->sql_fetch_object($res)) {	  $tab = explode(".", $ob->url);	  $tab = explode("//", $tab[0]);	  $site_name = mb_strtolower(trim($tab[1]), 'utf-8');	  echo "sitename : " . $site_name . "\n";	  $array = array();	  $array['microsite_main']['site_name'] = $site_name;	  $array['microsite_main']['id'] = $ob->id;	  if (!$_SQL->sql_save($array)) {	  debug($array);	  debug($_SQL->sql_error());	  die("problem update site_name");	  }	  }	  exit;	  } */	/*	  function one_shoot_clean_login_and_password() {	  $this->layout_name = false;	  $_SQL = Singleton::getInstance(SQL_DRIVER);	  $sql = "SELECT * FROM microsite_main";	  $res = $_SQL->sql_query($sql);	  while ($ob = $_SQL->sql_fetch_object($res)) {	  $array = array();	  $array['microsite_main']['login'] = trim($ob->login);	  $array['microsite_main']['pass1'] = trim($ob->pass1);	  $array['microsite_main']['pass2'] = trim($ob->pass2);	  $array['microsite_main']['pass3'] = trim($ob->pass3);	  $array['microsite_main']['password'] = trim($ob->password);	  $array['microsite_main']['id'] = $ob->id;	  echo 'id : ' . $ob->id . "\n";	  if (!$_SQL->sql_save($array)) {	  debug($array);	  debug($_SQL->sql_error());	  die("problem update site_name");	  }	  }	  exit;	  } */	function get_user_detail() {		include_once(LIBRARY . "Glial/service/webex/webex.php");		$this->layout_name = false;		$_SQL = Singleton::getInstance(SQL_DRIVER);		$sql = "SELECT *, a.id as id_user FROM microsite_user a          INNER JOIN microsite_main b ON a.id_microsite_main = b.id          INNER JOIN microsite_xml c ON c.id_microsite_main = b.id          WHERE c.xml = '' and a.execution_time = 0 and b.valid = 1";//and a.webex_id='daniela.axinte@alstom.com		$res = $_SQL->sql_query($sql);		//$tab_final = array();		$i = 0;		while ($ob = $_SQL->sql_fetch_object($res)) {			$i++;			$startmtime = microtime(true);			$xml = webex::get_user_detail($ob->site_name, $ob->login, $ob->password, $ob->webex_id);			$totaltime = round(microtime(true) - $startmtime, 3);			$user_detail = webex::convert_xml_to_array($xml);			if ($user_detail)			{				if ($user_detail['header']['response']['result'] === "SUCCESS")				{					$array = array();					$array['microsite_user']['id'] = $ob->id_user;					$array['microsite_user']['xml'] = base64_encode(gzcompress($xml));					$array['microsite_user']['execution_time'] = $totaltime;					if (!empty($user_detail['body']['bodyContent']['personalUrl']))					{						$array['microsite_user']['personal_url'] = $user_detail['body']['bodyContent']['personalUrl'];					}					$array['microsite_user']['expiration_date'] = $user_detail['body']['bodyContent']['expirationDate'];					$array['microsite_user']['time_zone_id'] = $user_detail['body']['bodyContent']['timeZoneID'];					if (!empty($user_detail['body']['bodyContent']['timeZone']))					{						$array['microsite_user']['time_zone'] = $user_detail['body']['bodyContent']['timeZone'];					}					$array['microsite_user']['time_zone_with_dst'] = $user_detail['body']['bodyContent']['timeZoneWithDST'];					$array['microsite_user']['language'] = $user_detail['body']['bodyContent']['language'];					if (!empty($user_detail['body']['bodyContent']['locale']))					{						$array['microsite_user']['locale'] = $user_detail['body']['bodyContent']['locale'];					}					$suscriber = array();					$participant = array();					$toll_free_call_in_number = array();					$toll_call_in_number = array();					if (!empty($user_detail['body']['bodyContent']['tspAccount']['tspAccount']))					{						if (!empty($user_detail['body']['bodyContent']['tspAccount']['tspAccount'][0]))						{							foreach ($user_detail['body']['bodyContent']['tspAccount']['tspAccount'] as $key => $tspAccount)							{								if (!empty($tspAccount['subscriberAccessCode']))								{									$suscriber[] = $tspAccount['subscriberAccessCode'];								}								if (!empty($tspAccount['participantAccessCode']))								{									$participant[] = $tspAccount['participantAccessCode'];								}								if (!empty($tspAccount['tollFreeCallInNumber']))								{									$toll_free_call_in_number[] = $tspAccount['tollFreeCallInNumber'];								}								if (!empty($tspAccount['tollCallInNumber']))								{									$toll_call_in_number[] = $tspAccount['tollCallInNumber'];								}							}							$array['microsite_user']['subscriber_access_code'] = implode(":", $suscriber);							$array['microsite_user']['participant_access_code'] = implode(":", $participant);							$array['microsite_user']['toll_free_call_in_number'] = implode(":", $toll_free_call_in_number);							$array['microsite_user']['toll_call_in_number'] = implode(":", $toll_call_in_number);							unset($suscriber);							unset($participant);							unset($toll_free_call_in_number);							unset($toll_call_in_number);						}						else						{							$array['microsite_user']['subscriber_access_code'] = $user_detail['body']['bodyContent']['tspAccount']['tspAccount']['subscriberAccessCode'];							$array['microsite_user']['participant_access_code'] = $user_detail['body']['bodyContent']['tspAccount']['tspAccount']['participantAccessCode'];							$array['microsite_user']['toll_free_call_in_number'] = $user_detail['body']['bodyContent']['tspAccount']['tspAccount']['tollFreeCallInNumber'];							$array['microsite_user']['toll_call_in_number'] = $user_detail['body']['bodyContent']['tspAccount']['tspAccount']['tollCallInNumber'];						}					}					$array['microsite_user']['language_id'] = $user_detail['body']['bodyContent']['languageID'];					$array['microsite_user']['user_id'] = $user_detail['body']['bodyContent']['userId'];					$startmtime2 = microtime(true);					$_SQL->sql_save($array);					$totaltime22 = round(microtime(true) - $startmtime2, 3);					unset($array);				}				else				{					echo "ERROR : " . $user_detail['header']['response']['result'] . "\n";					debug($user_detail['header']);				}			}			else			{				echo "ERROR answer XML !!!!!!!!!!!!!!!\n";			}			unset($xml);			unset($user_detail);			if ($i % 100 == 0)			{				echo "MEMORY PEAK    : " . number_format(memory_get_peak_usage(), 0, '.', ',') . "\n";				echo "MEMORY         : " . number_format(memory_get_usage(), 0, '.', ',') . "\n";				echo "Collect cycles : " . gc_collect_cycles() . "\n";			}			$totaltime2 = round(microtime(true) - $startmtime, 3);			$totaltime2 = $totaltime2 - $totaltime;			echo "$i [" . date("Y-m-d H:i:s") . "] " . $ob->site_name . "/" . $ob->webex_id . " (" . $totaltime . " / " . $totaltime2 . " / " . $totaltime22 . ")\n";		}		//file_put_contents("gg.xml", $xml);		exit;	}	function multi_treads() {		for ($i = 1; $i <= 50; $i++)		{			echo "[" . date("Y-m-d H:i:s") . "] start tread : " . $i . "\n";			$cmd = "php index.php microsite thread_xml";			$outputfile = "outputfile_" . $i;			$pidfile = "pidfile_" . $i;			exec(sprintf("%s > %s 2>&1 & echo $! >> %s", $cmd, $outputfile, $pidfile));			if ($i % 10 == 0)			{				sleep(1);			}		}		//exit;	}	function multi_thread_user() {		for ($i = 1; $i <= 2; $i++)		{			echo "start tread : " . $i . "\n";			$cmd = "php index.php microsite thread_user " . $i;			$outputfile = "user_thread_" . $i;			$pidfile = "pidfile_user_" . $i;			sleep(1);			exec(sprintf("%s > %s 2>&1 & echo $! >> %s", $cmd, $outputfile, $pidfile));		}		exit;	}	function test_ip() {		$this->layout_name = false;		$_SQL = Singleton::getInstance(SQL_DRIVER);		include LIBRARY . 'Glial' . DS . 'parser' . DS . 'whatismyipaddress' . DS . 'whatismyipaddress.php';		include LIBRARY . 'Glial' . DS . 'extract' . DS . 'html_dom.php';		whatismyipaddress::get_info_from_ip("95.36.2.58");		exit;	}	function update_ip() {		$this->layout_name = false;		$_SQL = Singleton::getInstance(SQL_DRIVER);		include LIBRARY . 'Glial' . DS . 'parser' . DS . 'whatismyipaddress' . DS . 'whatismyipaddress.php';		include LIBRARY . 'Glial' . DS . 'extract' . DS . 'html_dom.php';		$sql = "SELECT * FROM ip where hostname = ''";		$res = $_SQL->sql_query($sql);		while ($ob = $_SQL->sql_fetch_object($res)) {			$data = whatismyipaddress::get_info_from_ip($ob->ip);			if ($data)			{				$ip = array();				$ip['ip']['id'] = $ob->id;				$ip['ip']['ip'] = $ob->ip;				$ip['ip']['hostname'] = $data['hostname'];				$ip['ip']['isp'] = $data['isp'];				$ip['ip']['organization'] = $data['organization'];				$ip['ip']['proxy'] = $data['services'];				$ip['ip']['assignment'] = $data['assignment'];				$ip['ip']['type'] = $data['type'];				$ip['ip']['iso'] = $data['iso'];				$ip['ip']['country'] = $data['country'];				$ip['ip']['area'] = $data['area'];				$ip['ip']['city'] = $data['city'];				$ip['ip']['latitude'] = $data['latitude'];				$ip['ip']['longitude'] = $data['longitude'];				if (!$_SQL->sql_save($ip))				{					echo "[ERROR] IP : " . $ob->ip . ", failed to update !\n";				}				else				{					echo "IP : " . $ob->ip . ", updated.\n";				}				sleep(5);			}			else			{				echo "[ERROR] IP : " . $ob->ip . ", we couldn't reach : http://whatismyipaddress.com !\n";			}		}		exit;	}	function get_ip() {		$this->layout_name = false;		$_SQL = Singleton::getInstance(SQL_DRIVER);		$sql = "SELECT * FROM microsite_main";		$res = $_SQL->sql_query($sql);		while ($ob = $_SQL->sql_fetch_object($res)) {			$ip = gethostbyname($ob->site_name . ".webex.com");			$microsite_main = array();			$microsite_main['microsite_main']['id'] = $ob->id;			$microsite_main['microsite_main']['ip'] = $ip;			$GLOBALS['_SQL']->set_history_user(42);			$GLOBALS['_SQL']->set_history_type(13);			if (!$_SQL->sql_save($microsite_main))			{				echo "[ERROR] IP : " . $ip . ", failed to update !\n";			}		}		exit;	}	function edit($param) {		$_SQL = Singleton::getInstance(SQL_DRIVER);		$this->layout_name = "admin";		include LIBRARY . 'Glial' . DS . 'parser' . DS . 'whatismyipaddress' . DS . 'whatismyipaddress.php';		include LIBRARY . 'Glial' . DS . 'extract' . DS . 'html_dom.php';		include_once(LIBRARY . 'Glial' . DS . 'service' . DS . 'webex' . DS . 'webex.php');		if ($_SERVER['REQUEST_METHOD'] == "POST")		{			if (!empty($_POST['microsite_main']['id']))			{				$site_main = array();				$site_main['microsite_main'] = $_POST['microsite_main'];				//unset($site_main['microsite_main']['site_name']);				if (!empty($_POST['comment']))				{					//$_SQL->					$_SQL->set_history_type(16);					$data_comment['microsite_main']['id'] = $site_main['microsite_main']['id'];					$data_comment['microsite_main']['comment'] = $_POST['comment'];					$_SQL->sql_save($data_comment);				}				if (!empty($_POST['id_webex']))				{					//$_SQL->					$_SQL->set_history_type(14);					$_SQL->sql_delete($site_main);					$title = $GLOBALS['_LG']->getTranslation(__("Success"));					$msg = $GLOBALS['_LG']->getTranslation(__("This site has been deleted successfully."));					set_flash("success", $title, $msg);					header("location: " . LINK . "microsite/");					exit;				}												$xml = webex::get_microsite_users($site_main['microsite_main']['site_name'], $site_main['microsite_main']['login'], $site_main['microsite_main']['password'], 1, 1);				$answer = webex::test_answer($xml);				if ($answer)				{					$res = webex::convert_xml_to_array($xml);					$site_main['microsite_main']['total'] = $res['body']['bodyContent']['matchingRecords']['total'];					$site_main['microsite_main']['answer'] = $res['header']['response']['result'];					$site_main['microsite_main']['date_updated'] = date("c");					$_SQL->set_history_type(13);					if (!$_SQL->sql_save($site_main))					{						$title = $GLOBALS['_LG']->getTranslation(__("Error"));						$msg = $GLOBALS['_LG']->getTranslation(__("One or more problem came when you try to edit this site, please verify your informations"));						set_flash("error", $title, $msg);						header("location: " . LINK . "microsite/edit/" . $param[0]);						exit;					}					else					{						$title = $GLOBALS['_LG']->getTranslation(__("Success"));						$msg = $GLOBALS['_LG']->getTranslation(__("This site has been edited successfully.") . " " . __("users added") . " : " . $res['body']['bodyContent']['matchingRecords']['total'] . ".");						set_flash("success", $title, $msg);						header("location: " . LINK . "microsite/");						exit;					}				}				else				{					if ($xml)					{						$res = webex::convert_xml_to_array($xml);						$msg = $GLOBALS['_LG']->getTranslation(__("We tried to connect to Webex, but Webex answered us this error :") . " " . $res['header']['response']['result'] . " (" . $res['header']['response']['reason'] . ")");					}					else					{						$msg = $GLOBALS['_LG']->getTranslation(__("Impossible to connect to Webex. This url probably doesn't exist or this url has moved."));					}					$title = $GLOBALS['_LG']->getTranslation(__("Error"));					set_flash("error", $title, $msg);					header("location: " . LINK . "microsite/edit/" . $param[0]);					exit;				}			}		}		$this->title = __("Edit");		$this->ariane = "> " . '<a href="' . LINK . 'microsite/">Webex</a> > ' . $this->title;		$sql = "SELECT * FROM microsite_main where id=" . $param[0] . "";		$res = $_SQL->sql_query($sql);		$data = array();		if ($_SQL->sql_num_rows($res) == 1)		{			$data['microsite_main'] = $_SQL->sql_to_array($res);			$_GET['microsite_main']['site_name'] = $data['microsite_main'][0]['site_name'];			$_GET['microsite_main']['login'] = $data['microsite_main'][0]['login'];			$_GET['microsite_main']['password'] = $data['microsite_main'][0]['password'];		}		else		{			$title = $GLOBALS['_LG']->getTranslation(__("Error"));			$msg = $GLOBALS['_LG']->getTranslation(__("This site name doesn't exit in our database."));			set_flash("error", $title, $msg);			header("location: " . LINK . "microsite/");			exit;		}		$this->set('data', $data);		$this->javascript = array("jquery-1.4.4.min.js");	}	function add_weblogin() {		$this->layout_name = false;		include_once(LIBRARY . 'Glial' . DS . 'service' . DS . 'webex' . DS . 'webex.php');		$_SQL = Singleton::getInstance(SQL_DRIVER);		$sql = "select * from microsite_user_xml";		//		$res = $_SQL->sql_query($sql);		// preg_match_all('/^[0-9]$/i', $subject);		$i = 0;		while ($ob = $_SQL->sql_fetch_object($res)) {			$i++;			echo $i . "\n";			$xml = gzuncompress(base64_decode($ob->xml));			//$array = webex::convert_xml_to_array($xml);			$xml = webex::clean_xml($xml);			$out = array();			preg_match_all('/<[^>]+>([0-9]{9})<[^>]+>/', $xml, $matches);			foreach ($matches[0] as $value)			{				$tab_tag = explode(">", $value);				$tag = substr($tab_tag[0], 1);				if (in_array($tag, $this->_weblogin_exclude))				{					continue;				}				$value = explode("</", $tab_tag[1]);				//$out[] = $tag . '-' . $value[0];				$out[] = $value[0];			}			$out = array_unique($out);			//debug($out);			if (count($out) != 0)			{				$user = array();				$weblogin = implode(':', $out);				$user['microsite_user']['weblogin'] = $weblogin;				$user['microsite_user']['id'] = $ob->id_microsite_user;				if (!$_SQL->sql_save($user))				{					echo "Probleme insertion weblogin\n";					debug($_SQL->sql_error());					die();				}			}		}		exit;	}	function import() {		$this->layout_name = "admin";		$this->title = __("Add");		$this->ariane = '> <a href="">Webex</a> > ' . $this->title;		$_SQL = Singleton::getInstance(SQL_DRIVER);		include LIBRARY . 'Glial' . DS . 'parser' . DS . 'whatismyipaddress' . DS . 'whatismyipaddress.php';		include LIBRARY . 'Glial' . DS . 'extract' . DS . 'html_dom.php';		include_once(LIBRARY . 'Glial' . DS . 'service' . DS . 'webex' . DS . 'webex.php');		if ($_SERVER['REQUEST_METHOD'] == "POST")		{			if (!empty($_POST['none']['data']))			{				$all_line = explode("\n", $_POST['none']['data']);				$out = array();				foreach ($all_line as $line)				{					$line = trim($line);					if (strlen($line) === 2)					{						$country = strtolower($line);						continue;					}					else					{						$elem = explode(";", $line);						$elem = array_map("trim", $elem);						$site_name = webex::clean_site_name($elem[0]);						if (!empty($elem[1]))						{							$login = $elem[1];						}						$nb_elem = count($elem);						$sql = "SELECT * FROM microsite_main WHERE site_name = '" . $site_name . "'";						$res = $_SQL->sql_query($sql);						$data = $_SQL->sql_to_array($res);						//debug($data);						if ($_SQL->sql_num_rows($res) == 1)						{							if ($data[0]['answer'] == 'SUCCESS')							{								$out['ALREADY_EXIST'][] = $line;								continue;							}						}						$password = array();						for ($i = 2; $i < $nb_elem; $i++)						{							$password[] = $elem[$i];						}						if (count($password) > 1)						{							foreach ($password as $pass)							{								$xml = webex::get_microsite_users($site_name, $login, $pass, 1, 1);								$answer = webex::test_answer($xml);								if ($answer)								{									$good_pass = $pass;									break;								}							}						}						else						{							if (!empty($password[0]))							{								$good_pass = $password[0];							}							else							{								$good_pass = '';							}						}						$to_add = array();						if ($_SQL->sql_num_rows($res) == 1)						{							$to_add['microsite_main']['id'] = $data[0]['id'];							$to_add['microsite_main']['date_updated'] = date("c");							$out['UPDATED'][] = $line;						}						else						{							$out['NEW'][] = $line;							$to_add['microsite_main']['date_inserted'] = date("c");						}						$sql = "SELECT * FROM geolocalisation_country WHERE iso = '" . strtoupper($country) . "'";						$res2 = $_SQL->sql_query($sql);						$data2 = $_SQL->sql_to_array($res2);						$to_add['microsite_main']['site_name'] = $site_name;						$to_add['microsite_main']['login'] = $login;						$to_add['microsite_main']['password'] = $good_pass;						$to_add['microsite_main']['id_geolocalisation_country'] = $data2[0]['id'];						//$to_add['microsite_main']['xml'] = $data2[0]['id'];						$to_add['microsite_main']['id_history_etat'] = 1;						if (!$_SQL->sql_save($to_add))						{							debug($_SQL->sql_error());							debug($to_add);							debug($out);							die();						}					}				}				debug($out);			}		}	}	function add() {		$_SQL = Singleton::getInstance(SQL_DRIVER);		$this->layout_name = "admin";		include LIBRARY . 'Glial' . DS . 'parser' . DS . 'whatismyipaddress' . DS . 'whatismyipaddress.php';		include LIBRARY . 'Glial' . DS . 'extract' . DS . 'html_dom.php';		include_once(LIBRARY . 'Glial' . DS . 'service' . DS . 'webex' . DS . 'webex.php');		if ($_SERVER['REQUEST_METHOD'] == "POST")		{			if (!empty($_POST['microsite_main']['add']))			{				$site_main = array();				$site_main['microsite_main'] = $_POST['microsite_main'];				$sql = "SELECT * FROM microsite_main where site_name = '" . $_SQL->sql_real_escape_string($_POST['microsite_main']['site_name']) . "'";				$res = $_SQL->sql_query($sql);				if ($_SQL->sql_num_rows($res) != 0)				{					while ($ob = $_SQL->sql_fetch_object($res)) {						$title = $GLOBALS['_LG']->getTranslation(__("Warning"));						$msg = $GLOBALS['_LG']->getTranslation(__("This site already exist !") . "<br />" . __("You have been redirected to the edition !"));						set_flash("caution", $title, $msg);						header("location: " . LINK . "microsite/edit/" . $ob->id);						exit;					}				}				$xml = webex::get_microsite_users($site_main['microsite_main']['site_name'], $site_main['microsite_main']['login'], $site_main['microsite_main']['password'], 1, 1);				$answer = webex::test_answer($xml);				if ($answer)				{					$res = webex::convert_xml_to_array($xml);					$site_main['microsite_main']['total'] = $res['body']['bodyContent']['matchingRecords']['total'];					$site_main['microsite_main']['answer'] = $res['header']['response']['result'];					$site_main['microsite_main']['date_updated'] = date("c");					$site_main['microsite_main']['comment'] = $_POST['comment'];					$site_main['microsite_main']['id_history_etat'] = 1;					$site_main['microsite_main']['id_geolocalisation_country'] = $site_main['microsite_main']['id_geolocalisation_country'];					$_SQL->set_history_type(15);					if (!$_SQL->sql_save($site_main))					{						$title = $GLOBALS['_LG']->getTranslation(__("Error"));						$msg = $GLOBALS['_LG']->getTranslation(__("One or more problem came when you try to edit this site, please verify your informations"));						set_flash("error", $title, $msg);						$ret = array();						foreach ($_POST['microsite_main'] as $var => $val)						{							$ret[] = "microsite_main:" . $var . ":" . urlencode($val);						}						$param = implode("/", $ret);						header("location: " . LINK . "microsite/add/" . $param);						//header("location: " . LINK . "microsite/add/");						exit;					}					else					{						$title = $GLOBALS['_LG']->getTranslation(__("Success"));						$msg = $GLOBALS['_LG']->getTranslation(__("This site has been added successfully.") . " " . __("users added") . " : " . $res['body']['bodyContent']['matchingRecords']['total'] . ".");						set_flash("success", $title, $msg);						header("location: " . LINK . "microsite/add/");						exit;					}				}				else				{					if ($xml)					{						$res = webex::convert_xml_to_array($xml);						$msg = $GLOBALS['_LG']->getTranslation(__("We tried to connect to Webex, but Webex answered us this error :") . " " . $res['header']['response']['result'] . " (" . $res['header']['response']['reason'] . ")");					}					else					{						$msg = $GLOBALS['_LG']->getTranslation(__("Impossible to connect to Webex. This url probably doesn't exist or this url has moved."));					}					$title = $GLOBALS['_LG']->getTranslation(__("Error"));					set_flash("error", $title, $msg);					$ret = array();					foreach ($_POST['microsite_main'] as $var => $val)					{						$ret[] = "microsite_main:" . $var . ":" . urlencode($val);					}					$param = implode("/", $ret);					header("location: " . LINK . "microsite/add/" . $param);					exit;				}			}		}		$sql = "SELECT id, libelle from geolocalisation_country where libelle != '' order by libelle asc";		$res = $_SQL->sql_query($sql);		$data['geolocalisation_country'] = $_SQL->sql_to_array($res);		$this->title = __("Add");		$this->ariane = "> " . '<a href="' . LINK . 'microsite/">Webex</a> > ' . $this->title;		$this->javascript = array("jquery-1.4.4.min.js");		$this->set("data", $data);	}	function export($param) {		set_time_limit(-1);		$_SQL = Singleton::getInstance(SQL_DRIVER);		header("Cache-Control: public");		header("Content-Description: File Transfer");		header("Content-Disposition: attachment; filename=CapGemini_" . date("Y-m-d_His") . ".csv");		header("Content-type: text/csv");		//header("Content-Transfer-Encoding: binary");		include_once LIBRARY . 'Glial/export/csv.php';		$what = '';		$csv_terminated = "\n";		$csv_separator = ";";		$csv_enclosed = "\"";		$csv_escaped = "\\";		switch ($param[0])		{			case 'capgemini':				$sql = "SELECT * FROM capgemini";				$csv_separator = "`|";				$csv_enclosed = "";				$csv_escaped = "";				break;		}		csv::export_csv($sql, $what, $csv_terminated, $csv_separator, $csv_enclosed, $csv_escaped);		exit;	}	function admin_webex() {		if (from() == "administration.controller.php")		{			$module['picture'] = "administration/WebEx.png";			$module['name'] = "WebEx";			$module['description'] = __("Manage import data from webex");			return $module;		}		$this->layout_name = "admin";		$this->title = "Webex";		$this->ariane = ' > <a href="' . LINK . 'administration/">' . __('Administration') . "</a> > " . $this->title;		$_SQL = Singleton::getInstance(SQL_DRIVER);		$data['action'] = array("Global import", "Test site / login / password", "Import summary user", "Import detail user");		$this->set('data', $data);		$this->code_javascript[] = "jQuery(document).bind('ready', function() {     jQuery('#logcontent').logViewer({logUrl: 'log.html'});});";	}	function recup_decrypt_password_with_aes() {		$sql = "SELECT * FROM microsite_xml where xml = '' and execution_time != -1";	}	function import_data_from_cap() {		$file = "/home/www/cap.csv";		set_time_limit(-1);		$_SQL = Singleton::getInstance(SQL_DRIVER);		$handle = @fopen($file, "r");		if ($handle)		{			$buffer = fgets($handle, 4096);			while (($buffer = fgets($handle, 4096)) !== false) {				$tab = explode("`|", $buffer);				//print_r($tab);				//die();				$tab[28] = trim($tab[28]);				if (empty($tab[28]))				{					$tab[28] = "NO MATCH";				}				$sql = "UPDATE microsite_user a 					INNER JOIN microsite_main b ON a.id_microsite_main = b.id 					SET is_found_with= '" . $_SQL->sql_real_escape_string($tab[28]) . "'  					WHERE a.webex_id = '" . $_SQL->sql_real_escape_string($tab[0]) . "' AND b.site_name = '" . $_SQL->sql_real_escape_string($tab[9]) . "'";				echo $sql . "\n";				$_SQL->sql_query($sql);			}			echo $buffer;		}		if (!feof($handle))		{			echo "Error: unexpected fgets() fail\n";		}		fclose($handle);	}	function resultat_mapping() {		$this->layout_name = "admin";		$_SQL = Singleton::getInstance(SQL_DRIVER);		$sql = "select site_name,b.id			FROM microsite_user a			INNER JOIN microsite_main b ON a.id_microsite_main = b.id 			where is_found_with != ''			GROUP BY site_name,b.id						order by site_name";		$res = $_SQL->sql_query($sql);		$data['stats'] = array();		$to_map = array("DDI", "EMAIL", "EMAIL_AS_WEBEXID", "W1_WTT", "WEBEX_CONFREF", "WEBLOGIN", "WISE2_ACCESS", "NO MATCH");		while ($ob = $_SQL->sql_fetch_object($res)) {			$total = 0;			foreach ($to_map as $elem)			{				$sql = "SELECT count(1) as cpt FROM microsite_user WHERE id_microsite_main = " . $ob->id . " AND is_found_with = '" . $elem . "'";				$res2 = $_SQL->sql_query($sql);				$ob2 = $_SQL->sql_fetch_object($res2);				$data['stats'][$ob->site_name][$elem] = $ob2->cpt;				if ($elem != 'NO MATCH')				{					$total += $ob2->cpt;				}				else				{					$data['stats'][$ob->site_name]['percent'] = round($total / ($total + $ob2->cpt) * 100, 2) . "%";					//echo "{$ob->site_name} - {$ob->id} : {$data['stats'][$ob->site_name]['percent']} = round($total / ($total + {$ob2->cpt}) * 100, 2) . ;\n";				}			}								}		//print_r($data);		$this->set('data', $data);	}}