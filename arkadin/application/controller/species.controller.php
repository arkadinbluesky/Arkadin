<?phpif (!defined('SIZE_BACKUP')){	define("SIZE_BACKUP", 1024);}if (!defined('SIZE_SITE_MAX')){	define("SIZE_SITE_MAX", 890);}if (!defined('SIZE_MINIATURE_BIG')){	define("SIZE_MINIATURE_BIG", 250);}if (!defined('SIZE_MINIATURE_SMALL')){	define("SIZE_MINIATURE_SMALL", 158);}class species extends Controller {	/*	  function __contruct($a, $b, $c)	  {	  $this->controller = $a;	  $this->action = $b;	  $this->param = $c;	  $this->view = $b;	  parent::__construct($a, $b, $c);	  }	 */	public $module_group = "Species";	function index() {		$_SQL = Singleton::getInstance("mysql");		$sql = "select * FROM species_kingdom";		if ($res = $_SQL->sql_query($sql))		{			$ob = mysql_fetch_object($res);			$this->title = __("Species");			$this->ariane = "> " . $this->title;			//photos			$this->data['tab_img'] = $this->get_random_photo($ob->id, "species_kingdom", 1);			$this->set("data", $this->data);		}		else		{			header("location: " . LINK . "species/");			die();		}	}	function show($param) {		$data = array("gggg", "ok pas mal");		$this->set("data", $data);	}	private function get_id_from_scientific_name($name, $table) {		$_SQL = Singleton::getInstance("mysql");		$sql = "select id FROM " . $table . " WHERE scientific_name = '" . $name . "'";		if ($res = $_SQL->sql_query($sql))		{			$ob = mysql_fetch_object($res);			return $ob->id;		}		else		{			die("impossible to get this scientific_name" . $name);		}	}	function kingdom($param) {		$id = $this->get_id_from_scientific_name($param[0], "species_kingdom");		$this->title = $param[0];		$this->ariane = $this->generate_arial("kingdom", $this->title) . $this->title;		//photos		$this->data['tab_img'] = $this->get_random_photo($id, "species_phylum", 1);		$this->set("data", $this->data);	}	function phylum($param) {		$id = $this->get_id_from_scientific_name($param[0], "species_phylum");		$this->title = $param[0];		$this->ariane = $this->generate_arial("phylum", $this->title) . $this->title;		//photos		$this->data['tab_img'] = $this->get_random_photo($id, "species_class", 1);		$this->set("data", $this->data);			}	function classe($param) {		$_SQL = Singleton::getInstance("mysql");		$sql = "select e.id as id,		g.scientific_name as kingdom,		f.scientific_name as phylum,		e.scientific_name as class,		e.scientific_name as order2, e.*		FROM species_class e 		INNER JOIN species_phylum f ON e.id_species_phylum = f.id		INNER JOIN species_kingdom g ON f.id_species_kingdom = g.id		WHERE e.scientific_name = '" . mysql_real_escape_string($param[0]) . "'";		if ($res = $_SQL->sql_query($sql))		{			$ob = mysql_fetch_object($res);			$this->title = $param[0];			$this->ariane = $this->generate_arial("class", $this->title) . $this->title;			//photos			$this->data['tab_img'] = $this->get_random_photo($ob->id, "species_order", 1);			$this->set("data", $this->data);		}		else		{			header("location: " . LINK . "species/");			die();		}	}	function order($param) {		$_SQL = Singleton::getInstance("mysql");		$sql = "select d.id as id,		g.scientific_name as kingdom,		f.scientific_name as phylum,		e.scientific_name as class,		d.scientific_name as order2, d.*		FROM species_order d 		INNER JOIN species_class e ON d.id_species_class = e.id		INNER JOIN species_phylum f ON e.id_species_phylum = f.id		INNER JOIN species_kingdom g ON f.id_species_kingdom = g.id		WHERE d.scientific_name = '" . mysql_real_escape_string($param[0]) . "'";		if ($res = $_SQL->sql_query($sql))		{			$ob = mysql_fetch_object($res);			$this->title = $param[0];			$this->ariane = $this->generate_arial("order2", $this->title) . $this->title;			//photos			$this->data['tab_img'] = $this->get_random_photo($ob->id, "species_family", 1);			$this->set("data", $this->data);		}		else		{			header("location: " . LINK . "species/");			die();		}	}	function family($param) {		$_SQL = Singleton::getInstance("mysql");		$sql = "select c.id as id,		g.scientific_name as kingdom,		f.scientific_name as phylum,		e.scientific_name as class,		d.scientific_name as order2,		c.scientific_name as family, c.*		FROM species_family c		INNER JOIN species_order d ON c.id_species_order = d.id		INNER JOIN species_class e ON d.id_species_class = e.id		INNER JOIN species_phylum f ON e.id_species_phylum = f.id		INNER JOIN species_kingdom g ON f.id_species_kingdom = g.id		WHERE c.scientific_name = '" . mysql_real_escape_string($param[0]) . "'";		if ($res = $_SQL->sql_query($sql))		{			$ob = mysql_fetch_object($res);			$this->title = $param[0];			$this->ariane = $this->generate_arial("family", $this->title) . $this->title;			//photo_toto			$this->data['tab_img'] = $this->get_random_photo($ob->id, "species_genus", 1);			$this->data['id'] = $ob->id;			$this->set("data", $this->data);		}		else		{			header("location: " . LINK . "species/");			die();		}	}	function genus($param) {		$_SQL = Singleton::getInstance("mysql");		$sql = "select id FROM species_genus WHERE scientific_name = '" . mysql_real_escape_string($param[0]) . "'";		if ($res = $_SQL->sql_query($sql))		{			$ob = mysql_fetch_object($res);			$this->title = $param[0];			$this->ariane = $this->generate_arial("genus", $this->title) . $this->title;			$this->data['tab_img'] = $this->get_random_photo($ob->id, "species_main", 1);			$this->set("data", $this->data);		}		else		{			header("location: " . LINK . "species/");			die();		}	}	function test($param) {		$this->layout_name = false;		$this->title = str_replace("_", " ", $param[0]);		echo $this->title;	}	function nominal($param) {		$this->set("species", $param[0]);		$sub_species = explode("_", $param[0]);		$this->set("sub_species", $sub_species[1]);		$_SQL = Singleton::getInstance("mysql");		$sql = "SELECT * FROM species_translation WHERE `scientific_name` = '" . $_SQL->sql_real_escape_string($param[0]) . "'";		$res = $_SQL->sql_query($sql);		$ob = $_SQL->sql_fetch_object($res);		$scientific_name = str_replace("_", " ", $param[0]);		$this->title = $scientific_name;		if (!empty($ob->{$GLOBALS['_LG']->Get()}))		{			$this->title = $ob->{$GLOBALS['_LG']->Get()} . " (" . $this->title . ")";		}		if (strstr($param[count($param) - 1], '>'))		{			$this->ajax = true;			$exploded = explode('>', $param[count($param) - 1]);			$target = $exploded[1];			$id_source = $exploded[0];			switch ($id_source)			{				case "target":					$this->layout_name = "page";					break;				default:					$this->$param[1]($param);					$this->layout_name = false;					$this->view = $param[1];					//debug($this);					return;					break;			}		}		$sql = "select 		g.scientific_name as kingdom,		f.scientific_name as phylum,		e.scientific_name as class,		d.scientific_name as order2,		c.scientific_name as family,		b.scientific_name as genus,		a.*		FROM species_main a		INNER JOIN species_genus b ON a.id_species_genus = b.id		INNER JOIN species_family c ON b.id_species_family = c.id		INNER JOIN species_order d ON c.id_species_order = d.id		INNER JOIN species_class e ON d.id_species_class = e.id		INNER JOIN species_phylum f ON e.id_species_phylum = f.id		INNER JOIN species_kingdom g ON f.id_species_kingdom = g.id		WHERE a.scientific_name = '" . mysql_real_escape_string($scientific_name) . "'";		$res = $_SQL->sql_query($sql);		$ob = mysql_fetch_object($res);		$this->ariane = "> <a href=\"" . LINK . "species/\">" . __("Species") . "</a> > <a href=\"" . LINK . "species/kingdom/" . $ob->kingdom . "\">" . $ob->kingdom . "</a> > <a href=\"" . LINK . "species/\">" . $ob->phylum . "</a> > <a href=\"" . LINK . "species/class/" . $ob->class . "\">" . $ob->class . "</a> > <a href=\"" . LINK . "species/order/" . $ob->order2 . "\">" . $ob->order2 . "</a> > <a href=\"" . LINK . "species/family/" . $ob->family . "\">" . $ob->family . "</a> > <a href=\"" . LINK . "species/genus/" . $ob->genus . "\">" . $ob->genus . "</a> > " . $scientific_name;		$sql = "SELECT * FROM species_tree_id WHERE id_species_main = '" . $ob->id . "'";		$res = $_SQL->sql_query($sql);		$link = mysql_fetch_object($res);		//ext-3.0.0/examples/direct/php/api.php => api.js		$this->javascript = array("ext-3.0.0/adapter/ext/ext-base.js", "ext-3.0.0/ext-all.js", "api.js", "jquery-1.4.2.min.js", "jquery.history.js", "histo.js");		$this->code_javascript[] = "		Ext.onReady		(			function()			{				Ext.Direct.addProvider(Ext.app.REMOTING_API);				var tree = new Ext.tree.TreePanel				(					{						autoScroll: true,						renderTo: document.getElementById('menu_cadre_arbre'),						animate: false, //lol						rootVisible:true,						enableDD:false,												root: {							expanded:true,							useArrows: false,							id: 'n.1.1.1.9.101.438', //n.1.1.1.9.101.438							text: '<b>Estrildidae</b>',													},						preloadChilren: true,												listeners:						{							click: function(n)							{								var a,b,c;																a = n.attributes.id.split('.');								if (a.length == 9)								{									b = a[a.length-1];									var  reg=new  RegExp('( )', 'g');									window.location = '#" . LINK . "species/nominal/'+n.attributes.text.replace(reg,'_')+'/target>page';								}							}						},						loader: 						new Ext.tree.TreeLoader						(							{								directFn: TestAction.getTree,							}													),						//tree.selectPath('/n.1/n.1.1/n.1.1.1/n.1.1.1.9/n.1.1.1.9.101/n.1.1.1.9.101.438/n.1.1.1.9.101.438.2517/n.1.1.1.9.101.438.2517.9207');					}									);				tree.selectPath('/n.1.1.1.9.101.438/n.1.1.1.9.101." . $link->id_species_family . "." . $link->id_species_genus . "/n.1.1.1.9.101." . $link->id_species_family . "." . $link->id_species_genus . "." . $link->id_species_main . "');			return true;			}		);";		$this->code_javascript[] = "		$(function(){			$('ul.menu_tab li').live('click', function(){				$(this).siblings().removeClass('selected');				$(this).addClass('selected');			});		});";	}	function sub_species($param) {		debug($param);		echo "hxhfg";		$_SQL = Singleton::getInstance("mysql");		$sql = "select a.*,a.id as id from species_sub a		INNER JOIN species_main b ON a.id_species_main	= b.id		where b.scientific_name='" . mysql_real_escape_string(str_replace("_", " ", $param[0])) . "' order by b.scientific_name";		$res = $_SQL->sql_query($sql);		echo "<div id=\"photo\">";		$i = 0;		while ($ob2 = mysql_fetch_object($res)) {			$i++;			//$tab = explode("/",$ob2->UrlFound);			//$pic = $tab[count($tab)-1];			$tabssp = explode(" ", $ob2->scientific_name);			$LongName = substr($tabssp[0], 0, 1) . ". " . substr($tabssp[1], 0, 1) . ". " . $tabssp[2];			/**/			if ($tabssp[2] == $tabssp[1])			{				$selection = "active";				$_GET['id_ssp'] = $ob2->id;			}			else				$selection = "passive";			echo "<span class=\"shadowImage\">			<div id=\"menu_2_" . $i . "\" class=\"$selection\">			<a href=\"\" title=\"{$ob2->scientific_name}\">			<table>";			$sql = "select count(1) from species_picture_main where id_species_sub = '" . $ob2->id . "'";			$r = $_SQL->sql_query($sql);			$d = mysql_fetch_row($r);			if ($d[0] > 0)			{				$rand = mt_rand(0, $d[0] - 1);				$sql = "select * from species_picture_main				where id_species_sub = '" . $ob2->Id . "' LIMIT $rand, 1";				$res2 = $_SQL->sql_query($sql);				$ob = mysql_fetch_object($res2);				$species = str_replace(" ", "_", $ob2->Species);				$url = "crop/158x158/Eukaryota/{$ob2->Kingdom}/{$ob2->Phylum}/{$ob2->Class}/{$ob2->Order2}/{$ob2->Family}/{$ob2->Genus}/{$species}/{$ob->Id}-{$species}.jpg";			}			else			{				$url = IMG . "main/nopictureavailable.png";			}			echo "			<tr><td class=\"img\" style=\"background: url(" . $url . ")\">			<p class=\"text-ombre\">" . $LongName . "</p></td>			</tr></table>			</a>						</div></span>";		}		echo "</div>";  //id=photo end		echo "<div class=\"clear\"></div>";		echo "<div id=\"marge_after_ssp\"></div>";		echo "<div id=\"result_2\">";		//echo "<div id=\"result_3\">";		//include("modules/species/detail_ssp_menu.php");		//echo "</div>";		echo "</div>";	}	function general($param) {		$this->layout = false;		$_SQL = Singleton::getInstance("mysql");		$sql = "select a.id as id,		a.id_species_iucn,		a.scientific_name,		c.libelle		FROM species_main a		LEFT JOIN species_iucn c ON c.Id = a.id_species_iucn		WHERE a.scientific_name = '" . mysql_real_escape_string(str_replace("_", " ", $param[0])) . "'";		$res = $_SQL->sql_query($sql);		//echo $sql;		$ob2 = mysql_fetch_object($res);		echo $sql;		//if ($ob2->CommonName == "") $ob2->CommonName = $ob2->Species;		echo "<div id=\"fiche\">";		echo "<div id=\"taxobox\">";		echo "<table>";		echo "<tr>";		echo "<td id=\"main_photo\">";		//".species::GetSpeciesNameById($_GET['id_species'],$Language->Get())."		echo "<div class=\"title_box\"><span><img src=\"pictures/sexe/female.gif\" border=\"0\" align=\"top\" /> <img src=\"pictures/sexe /male.gif\" border=\"0\" align=\"top\" /></span><br />";		echo "<i>" . $ob2->scientific_name . "</i><br />				</div>";		$sql = "select count(1) from species_picture_main where id_species_main = '" . $ob2->id . "'";		$r = $_SQL->sql_query($sql);		$d = mysql_fetch_row($r);		$alt = "";		$title = "";		if ($d[0] > 0)		{			$rand = mt_rand(0, $d[0] - 1);			$sql = "select *,a.Id as Id from species_picture_main a 					inner join species_tree_name b on a.id_species_main = b.id					where id_species_sub = '" . $ob2->id . "' LIMIT $rand, 1";			$res2 = $_SQL->sql_query($sql);			$ob3 = mysql_fetch_object($res2);			$species = str_replace(" ", "_", $ob2->Species);			$url = IMG . "crop/250x250/Eukaryota/{$ob3->Kingdom}/{$ob3->Phylum}/{$ob3->Class}/{$ob3->Order2}/{$ob3->Family}/{$ob3->Genus}/{$species}/{$ob3->Id}-{$species}.jpg";			$alt = $ob->ScientificName;			$title = $ob->ScientificName;		}		else		{			$url = IMG . "main/nopictureavailable250.png";		}		echo "<img src=\"$url\" title=\"$title\" alt=\"$alt\" border=\"0\" width=\"250\" height=\"250\" />";		echo "<div class=\"title_box\">BiomÃ©trie</div>";		echo "<div class=\"biometrie\"><span>11 Ã  12 cm</span>Taille : </div>";		echo "<div class=\"biometrie\" style=\"background:#e5e5e5\"><span>15 Ã  16 cm</span>Envergure : </div>";		echo "<div class=\"biometrie\"><span>11 grammes</span>Poids : </div>";		echo "<div class=\"biometrie\" style=\"background:#e5e5e5\"><span>4 - 6</span>Nombre d'oeufs : </div>";		echo "<div class=\"biometrie\"><span>14 jours</span>Incubation : </div>";		echo "<div class=\"biometrie\" style=\"background:#e5e5e5\"><span>21 jours</span>Sortie du nid : </div>";		echo "<div class=\"biometrie\"><span>2.5</span>DiamÃ¨tre de la bague : </div>";		echo "<div class=\"title_box\">Statut de conservation IUCN</div>";		$EX = "";		$EW = "";		$CR = "";		$EN = "";		$VU = "";		$NT = "";		$LC = "";		$NE = "";		$DD = "";		switch ($ob2->id_species_iucn)		{			case 1: case 8: case 11: $LC = "class=\"active\"";				break;			case 2: $DD = "class=\"active\"";				break;			case 3: $EN = "class=\"active\"";				break;			case 4: $VU = "class=\"active\"";				break;			case 5: case 9: $NT = "class=\"active\"";				break;			case 6: $CR = "class=\"active\"";				break;			case 7: $EX = "class=\"active\"";				break;			case 10: $EW = "class=\"active\"";				break;			default: $NE = "class=\"active\"";				break;		}		echo "<div id=\"iucn\">				<div class=\"libelle\">" . __($ob2->libelle) . "</div>				<span " . $EX . ">EX</span>				<span " . $EW . ">EW</span>				<span " . $CR . ">CR</span>				<span " . $EN . ">EN</span>				<span " . $VU . ">VU</span>				<span " . $NT . ">NT</span>				<span " . $LC . " style=\"margin-right :11px;\">LC</span>				<span " . $NE . ">NE</span>				<span " . $DD . " style=\"margin-right :0px;\">DD</span>				<div class=\"clear\"></div>				</div>";		//echo "<img src=\"pictures/main/244px-Status_iucn3.1_LC-fr.svg.png\" border=\"0\" />";		echo "<div class=\"title_box\">Distribution</div>";		echo "<img src=\"" . IMG . "main/repartition.png\" width=\"250\" height=\"169\" border=\"0\" />";		echo "</td>";		echo "<td class=\"photo_ombre_droite\"></td>";		echo "</tr>";		echo "<tr>";		echo "<td id=\"photo_ombre_bas\" colspan=\"2\"></td>";		echo "</tr>";		echo "</table>";		echo "</div>";		echo "		<h3 class=\"item\">" . __("Identification") . "</h3>		<h3 class=\"item\">" . __("Habitat") . "</h3>		<h3 class=\"item\">" . __("Behaviors") . "</h3>		<h3 class=\"item\">" . __("Breeding") . "</h3>		<h3 class=\"item\">" . __("Plan") . "</h3>		<h3 class=\"item\">" . __("Reference") . "</h3>		</div>";	}	function block_video() {			}	function block_last_photo() {		include_once LIB . 'imageprocessor.lib.php';		$this->javascript = array("jquery-1.4.4.min.js", "jawdropper_slider.js");		$this->code_javascript[] = "		$(document).ready(function() {			$('#slider').jdSlider({ 				showSelectors : false,				showNavigation     : false,				showCaption        : true,				width  : 250,				height : 250,				transitions : 'stretchOut, lightBeam, fade, sliceFade, lightBeam,shrink, sliceFade,slide, slideOver',				randomTransitions : true,				pauseOnHover       : true			});		});";		$_SQL = Singleton::getInstance("mysql");		$sql = "select *,a.id as id_photo		FROM species_picture_main a		INNER JOIN species_tree_name b ON a.id_species_main = b.Id		INNER JOIN species_translation z ON z.id_row = a.id_species_main and id_table = 7		WHERE a.id_history_etat = 1		ORDER BY date_validated DESC LIMIT 8";		$res = $_SQL->sql_query($sql);		$data = $_SQL->sql_to_array($res);		$this->set("data", $data);		//debug($data);	}	function router() {		function doRpc($cdata) {			global $API;			try			{				$API = array('TestAction' => array(						'methods' => array(							'doEcho' => array(								'len' => 1							),							'getTree' => array(								'len' => 1							)						)					)				);				if (!isset($API[$cdata->action]))				{					throw new Exception('Call to undefined action: ' . $cdata->action);				}				$action = $cdata->action;				$a = $API[$action];				doAroundCalls($a['before'], $cdata);				$method = $cdata->method;				$mdef = $a['methods'][$method];				if (!$mdef)				{					throw new Exception("Call to undefined method: $method on action $action");				}				doAroundCalls($mdef['before'], $cdata);				$r = array(					'type' => 'rpc',					'tid' => $cdata->tid,					'action' => $action,					'method' => $method				);				//require_once("classes/$action.php");				$o = new $action();				$params = isset($cdata->data) && is_array($cdata->data) ? $cdata->data : array();				$r['result'] = call_user_func_array(array($o, $method), $params);				doAroundCalls($mdef['after'], $cdata, $r);				doAroundCalls($a['after'], $cdata, $r);			}			catch (Exception $e)			{				$r['type'] = 'exception';				$r['message'] = $e->getMessage();				$r['where'] = $e->getTraceAsString();			}			return $r;		}		function doAroundCalls(&$fns, &$cdata, &$returnData = null) {			if (!$fns)			{				return;			}			if (is_array($fns))			{				foreach ($fns as $f)				{					$f($cdata, $returnData);				}			}			else			{				$fns($cdata, $returnData);			}		}		$this->layout_name = false;		$isForm = false;		$isUpload = false;		if (isset($GLOBALS['HTTP_RAW_POST_DATA']))		{			$postdata = file_get_contents("php://input");			//die($postdata);		}		//$postdata = '{"action":"TestAction","method":"getTree","data":["n.1.1.1.9.101.438"],"type":"rpc","tid":2}';		if (isset($postdata))		{			header('Content-Type: text/javascript');			$data = json_decode($postdata);		}		else		{			die('Invalid request.');		}		$response = null;		if (is_array($data))		{			$response = array();			foreach ($data as $d)			{				$response[] = doRpc($d);			}		}		else		{			$response = doRpc($data);		}		if ($isForm && $isUpload)		{			echo '<html><body><textarea>';			echo json_encode($response);			echo '</textarea></body></html>';		}		else		{			echo json_encode($response);		}		exit;	}	function get_species_name_by_scientific_name($name, $lg) {		$sql = "select * from SpeciesTranslation where IdRow = '" . mysql_real_escape_string($id) . "' and IdTable =7";		$res = sql::sql_query($sql);		if (mysql_num_rows($res) == 1)		{			$ob = mysql_fetch_object($res);			//echo "language : ".$ob->$lg;			if (@$ob->$lg != "")				return $ob->$lg;			else				return str_replace("_", " ", $ob->ScientificName);		}		else		{			return "Undefined";		}	}	private function get_random_photo($id, $table, $number = 1) {		$_SQL = Singleton::getInstance("mysql");		switch ($table)		{			case "species_kingdom": $id_mother = $id;				break;			case "species_phylum": $id_mother = "id_species_kingdom";				break;			case "species_class": $id_mother = "id_species_phylum";				break;			case "species_order": $id_mother = "id_species_class";				break;			case "species_family": $id_mother = "id_species_order";				break;			case "species_genus": $id_mother = "id_species_family";				break;			case "species_main": $id_mother = "id_species_genus";				break;			case "species_sub": $id_mother = "id_species_main";				break;		}		$sql2 = "SELECT * FROM " . $table . " WHERE " . $id_mother . " = " . $id . " AND id_history_etat = 1 ORDER BY scientific_name";		debug($sql2);		$res2 = $_SQL->sql_query($sql2);		$i = 0;		while ($ob2 = $_SQL->sql_fetch_object($res2)) {			$data[$i]['name'] = $ob2->scientific_name;			$data[$i]['url'] = str_replace(' ', '_', $ob2->scientific_name) . "/";			$sql = "select count(1) as cpt FROM species_picture_main a			INNER JOIN  species_tree_id b ON a.id_species_main = b.id_species_main			WHERE b.id_" . $table . " = " . $ob2->id . "";			$res3 = $_SQL->sql_query($sql);			$ob = $_SQL->sql_fetch_object($res3);			$j = 0;			if ($ob->cpt > 0)			{				$rand = mt_rand(0, $ob->cpt - 1);				$sql = "select *, a.id as id_ptoho FROM species_picture_main a				INNER JOIN species_tree_id b ON a.id_species_main = b.id_species_main				INNER JOIN species_tree_name c ON c.id = b.id_species_main				WHERE b.id_" . $table . " = " . $ob2->id . " LIMIT " . $rand . ", " . $number;				$res4 = $_SQL->sql_query($sql);				while ($ob4 = $_SQL->sql_fetch_object($res4)) {					$species_name = str_replace(" ", "_", $ob4->species_);					$path = "Eukaryota/{$ob4->kingdom}/{$ob4->phylum}/{$ob4->class}/{$ob4->order2}/{$ob4->family}/{$ob4->genus}/" . $species_name;					$picture_name = $ob4->id_ptoho . "-" . $species_name . ".jpg";					$data[$i]['photo'][] = IMG . "crop/" . SIZE_MINIATURE_SMALL . "x" . SIZE_MINIATURE_SMALL . "/" . $path . DS . $picture_name;					$data[$i]['photo2'][] = IMG . "crop/" . SIZE_MINIATURE_BIG . "x" . SIZE_MINIATURE_BIG . "/" . $path . DS . $picture_name;					$j++;				}			}			for ($k = $j; $k < $number; $k++)			{				$data[$i]['photo'][] = IMG . "main/nopictureavailable.png";			}			$i++;		}		return $data;	}	function admin_species() {		if (from() === "administration.controller.php")		{			$module = array();			$module['picture'] = "administration/199332-bird-saver.png";			$module['name'] = __("Species");			$module['description'] = __("Organize the taxons");			return $module;		}		$this->title = __("Species");		$this->ariane = "> " . $this->title;		$_SQL = Singleton::getInstance("mysql");		$sql = "SELECT a.scientific_name as genus, b.scientific_name as species, c.scientific_name as subspecies, a.id as id_genus, b.id as id_species, c.id as id_subspecies,			a.is_valid as valid_genus, b.is_valid as valid_species, c.is_valid as valid_subspecies			FROM species_genus a			INNER JOIN species_main b ON a.id = b.id_species_genus			INNER JOIN species_sub c ON b.id = c.id_species_main			WHERE a.id_species_family = 438			ORDER BY a.scientific_name, b.scientific_name, c.scientific_name";		$res = $_SQL->sql_query($sql);		$this->data['species'] = $_SQL->sql_to_array($res);		$this->set("data", $this->data);	}	private function generate_arial($table, $id) {		$_SQL = Singleton::getInstance("mysql");		$sql = "SELECT * FROM species_tree_name WHERE " . $table . " = '" . $_SQL->sql_real_escape_string($id) . "' LIMIT 1";		$res = $_SQL->sql_query($sql);		$tmp = $_SQL->sql_to_array($res);		$this->data['species'] = $tmp[0];		switch ($table)		{			case 'kingdom': $lgt = 1;				break;			case 'phylum': $lgt = 2;				break;			case 'class': $lgt = 3;				break;			case 'order2': $lgt = 4;				break;			case 'family': $lgt = 5;				break;			case 'genus': $lgt = 6;				break;			case 'species_': $lgt = 7;				break;			default :				die("unknow table : " . $table);				break;		}		$arial = "> ";		$arial .= "<a href=\"" . LINK . "species/\">" . __("Species") . "</a> > ";		if ($lgt > 1)		{			$arial .= "<a href=\"" . LINK . "species/kingdom/" . $this->data['species']['kingdom'] . "\">" . __($this->data['species']['kingdom']) . "</a> > ";			if ($lgt > 2)			{				$arial .= "<a href=\"" . LINK . "species/phylum/" . $this->data['species']['phylum'] . "\">" . __($this->data['species']['phylum']) . "</a> > ";				if ($lgt > 3)				{					$arial .= "<a href=\"" . LINK . "species/classe/" . $this->data['species']['class'] . "\">" . __($this->data['species']['class']) . "</a> > ";					if ($lgt > 4)					{						$arial .= "<a href=\"" . LINK . "species/order/" . $this->data['species']['order2'] . "\">" . __($this->data['species']['order2']) . "</a> > ";						if ($lgt > 5)						{							$arial .= "<a href=\"" . LINK . "species/family/" . $this->data['species']['family'] . "\">" . __($this->data['species']['family']) . "</a> > ";							if ($lgt > 6)							{								$arial .= "<a href=\"" . LINK . "species/genus/" . $this->data['species']['genus'] . "\">" . __($this->data['species']['genus']) . "</a> > ";								if ($lgt > 7)								{									$arial .= "<a href=\"" . LINK . "species/genus/" . $this->data['species']['species_'] . "\">" . __($this->data['species']['species_']) . "</a> > ";								}							}						}					}				}			}		}		return $arial;	}}